version: 2
image_name: trustyai_ragas_distro
apis:
- eval
- inference
- files
- benchmarks
- datasetio
providers:
  eval:
    - provider_id: ${env.KUBEFLOW_LLAMA_STACK_URL:+trustyai_ragas_remote}
      provider_type: remote::trustyai_ragas
      module: llama_stack_provider_ragas.remote
      config:
        embedding_model: ${env.EMBEDDING_MODEL}
        kubeflow_config:
          results_s3_prefix: ${env.KUBEFLOW_RESULTS_S3_PREFIX}
          s3_credentials_secret_name: ${env.KUBEFLOW_S3_CREDENTIALS_SECRET_NAME}
          pipelines_endpoint: ${env.KUBEFLOW_PIPELINES_ENDPOINT}
          namespace: ${env.KUBEFLOW_NAMESPACE}
          llama_stack_url: ${env.KUBEFLOW_LLAMA_STACK_URL}
          base_image: ${env.KUBEFLOW_BASE_IMAGE}
          pipelines_api_token: ${env.KUBEFLOW_PIPELINES_TOKEN:=}
        kvstore:
          namespace: ragas
          backend: kv_default
    - provider_id: ${env.EMBEDDING_MODEL:+trustyai_ragas_inline}
      provider_type: inline::trustyai_ragas
      module: llama_stack_provider_ragas.inline
      config:
        embedding_model: ${env.EMBEDDING_MODEL}
        kvstore:
          namespace: ragas
          backend: kv_default
  datasetio:
  - provider_id: localfs
    provider_type: inline::localfs
    config:
      kvstore:
        namespace: datasetio::localfs
        backend: kv_default
  inference:
    - provider_id: ollama
      provider_type: remote::ollama
      config:
        url: ${env.OLLAMA_URL:=http://localhost:11434}
  files:
  - provider_id: meta-reference-files
    provider_type: inline::localfs
    config:
      storage_dir: ${env.FILES_STORAGE_DIR:=~/.llama/distributions/trustyai_ragas_distro/files}
      metadata_store:
        table_name: files_metadata
        backend: sql_default
storage:
  backends:
    kv_default:
      type: kv_sqlite
      db_path: ${env.SQLITE_STORE_DIR:=~/.llama/distributions/trustyai_ragas_distro}/kvstore.db
    sql_default:
      type: sql_sqlite
      db_path: ${env.SQLITE_STORE_DIR:=~/.llama/distributions/trustyai_ragas_distro}/sql_store.db
  stores:
    metadata:
      namespace: registry
      backend: kv_default
    inference:
      table_name: inference_store
      backend: sql_default
      max_write_queue_size: 10000
      num_writers: 4
    conversations:
      table_name: openai_conversations
      backend: sql_default
registered_resources:
  models:
  - metadata:
      embedding_dimension: 384
    model_id: all-MiniLM-L6-v2
    provider_id: ollama
    provider_model_id: all-minilm:latest
    model_type: embedding
  - metadata: {}
    model_id: granite3.3:2b
    provider_id: ollama
    provider_model_id: granite3.3:2b
    model_type: llm
  shields: []
  vector_dbs: []
  datasets: []
  scoring_fns: []
  benchmarks: []
  tool_groups: []
server:
  port: 8321
telemetry:
  enabled: true
